// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: applications.sql

package db

import (
	"context"

	null "github.com/guregu/null/v5"
)

const createApplication = `-- name: CreateApplication :one
INSERT INTO applications (
  job_title,
  company,
  user_id,
  status,
  location,
  notes,
  application_date
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, job_title, company, location, application_date, user_id, status, notes, created_at, updated_at
`

type CreateApplicationParams struct {
	JobTitle        string      `json:"jobTitle"`
	Company         string      `json:"company"`
	UserID          int32       `json:"userId"`
	Status          string      `json:"status"`
	Location        null.String `json:"location"`
	Notes           null.String `json:"notes"`
	ApplicationDate null.Time   `json:"applicationDate"`
}

func (q *Queries) CreateApplication(ctx context.Context, arg CreateApplicationParams) (Application, error) {
	row := q.db.QueryRowContext(ctx, createApplication,
		arg.JobTitle,
		arg.Company,
		arg.UserID,
		arg.Status,
		arg.Location,
		arg.Notes,
		arg.ApplicationDate,
	)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.JobTitle,
		&i.Company,
		&i.Location,
		&i.ApplicationDate,
		&i.UserID,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteApplication = `-- name: DeleteApplication :exec
DELETE FROM applications
WHERE id = $1
`

func (q *Queries) DeleteApplication(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteApplication, id)
	return err
}

const getApplication = `-- name: GetApplication :one
SELECT id, job_title, company, location, application_date, user_id, status, notes, created_at, updated_at FROM applications
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetApplication(ctx context.Context, id int32) (Application, error) {
	row := q.db.QueryRowContext(ctx, getApplication, id)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.JobTitle,
		&i.Company,
		&i.Location,
		&i.ApplicationDate,
		&i.UserID,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listApplications = `-- name: ListApplications :many
SELECT id, job_title, company, location, application_date, user_id, status, notes, created_at, updated_at FROM applications
WHERE user_id = $1 AND id > $2
ORDER BY id
LIMIT $3
`

type ListApplicationsParams struct {
	UserID int32 `json:"userId"`
	ID     int32 `json:"id"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) ListApplications(ctx context.Context, arg ListApplicationsParams) ([]Application, error) {
	rows, err := q.db.QueryContext(ctx, listApplications, arg.UserID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Application
	for rows.Next() {
		var i Application
		if err := rows.Scan(
			&i.ID,
			&i.JobTitle,
			&i.Company,
			&i.Location,
			&i.ApplicationDate,
			&i.UserID,
			&i.Status,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateApplication = `-- name: UpdateApplication :one
UPDATE applications
  set job_title = $2,
  company = $3,
  application_date = $4,
  status = $5,
  location = $6,
  notes = $7
WHERE id = $1 RETURNING id, job_title, company, location, application_date, user_id, status, notes, created_at, updated_at
`

type UpdateApplicationParams struct {
	ID              int32       `json:"id"`
	JobTitle        string      `json:"jobTitle"`
	Company         string      `json:"company"`
	ApplicationDate null.Time   `json:"applicationDate"`
	Status          string      `json:"status"`
	Location        null.String `json:"location"`
	Notes           null.String `json:"notes"`
}

func (q *Queries) UpdateApplication(ctx context.Context, arg UpdateApplicationParams) (Application, error) {
	row := q.db.QueryRowContext(ctx, updateApplication,
		arg.ID,
		arg.JobTitle,
		arg.Company,
		arg.ApplicationDate,
		arg.Status,
		arg.Location,
		arg.Notes,
	)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.JobTitle,
		&i.Company,
		&i.Location,
		&i.ApplicationDate,
		&i.UserID,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
